#version 460
#extension GL_ARB_shading_language_include : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "rand.glsl"
#include "common.glsl"
#include "triangle.glsl"
#include "material.glsl"

layout(constant_id = 0) const uint NUM_SAMPLES = 1;
layout(constant_id = 1) const uint NUM_BOUNCES = 2;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0) writeonly uniform image2D image;

layout(push_constant) uniform PushConstants {
    vec4 position;
    vec4 horizontal;
    vec4 vertical;
    vec4 forward;
    uint frame_count;
} pcs;

layout(location = 0) rayPayloadEXT Payload payload;

mat3 normalMatrix(vec3 normal) {
    vec3 orthogonal;
    if (abs(normal.x) > 0.99) {
        orthogonal = vec3(0, 0, 1);
    } else {
        orthogonal = vec3(1, 0, 0);
    }

    const vec3 tangent = normalize(cross(normal, orthogonal));
    const vec3 bitangent = normalize(cross(normal, tangent));
    return mat3(tangent, bitangent, normal);
}

void main() {
    const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 uv = pixel / vec2(gl_LaunchSizeEXT.xy);
    const vec2 d = uv * 2.0f - 1.0f;

    const float tmin = 0.001f;
    const float tmax = 10000.0f;

    uint rng_state = tea(gl_LaunchIDEXT.x * pcs.frame_count, gl_LaunchIDEXT.y * pcs.frame_count);

    vec3 final_color = vec3(0.0);
    for (int i = 0; i < NUM_SAMPLES; ++i) {
        vec3 color = vec3(0.0);
        vec3 atten = vec3(1.0);
        vec3 origin = pcs.position.xyz;
        vec3 direction = normalize(pcs.forward.xyz + pcs.horizontal.xyz * d.x - pcs.vertical.xyz * d.y);
        for (int j = 0; j < NUM_BOUNCES; ++j) {
            payload.t = 1e32;
            traceRayEXT(
                topLevelAS,
                gl_RayFlagsOpaqueEXT | gl_RayFlagsCullBackFacingTrianglesEXT,
                0xff,
                0,
                0,
                0,
                origin.xyz,
                tmin,
                direction.xyz,
                tmax,
                0
            );

            if (payload.t == 1e32) {
                float t = 0.5 * (direction.y + 1.0);
                vec3 white = vec3(1.0, 1.0, 1.0);
                vec3 blue = vec3(0.5, 0.7, 1.0);
                color += atten * mix(white, blue, t);
                break;
            } else {
                const TriangleData triangle_data = getTriangleData(payload);
                const MaterialData material_data = getMaterialData(triangle_data);

                color += material_data.emissive * 10.0 * atten;
                atten *= material_data.albedo.xyz * 0.5;

                if (j < NUM_BOUNCES - 1) {
                    origin += direction * payload.t + (triangle_data.geometry_normal) * 0.00001f;

                    const vec3 diffuse = cosine_weighted_sample(rng_state, normalMatrix(material_data.normal));
                    const vec3 reflection = reflect(direction, material_data.normal);
                    direction = normalize(mix(reflection, diffuse, material_data.roughness));
                }
            }
        }
        final_color += color;
    }

    final_color /= NUM_SAMPLES;

    final_color = vec3(
            sqrt(final_color.r),
            sqrt(final_color.g),
            sqrt(final_color.b)
        );
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(final_color, 1.0f));
}
